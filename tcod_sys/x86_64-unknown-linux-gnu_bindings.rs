/* automatically generated by rust-bindgen */

pub const __llvm__: u32 = 1;
pub const __clang__: u32 = 1;
pub const __clang_major__: u32 = 10;
pub const __clang_minor__: u32 = 0;
pub const __clang_patchlevel__: u32 = 0;
pub const __clang_version__: &'static [u8; 8usize] = b"10.0.0 \0";
pub const __GNUC__: u32 = 4;
pub const __GNUC_MINOR__: u32 = 2;
pub const __GNUC_PATCHLEVEL__: u32 = 1;
pub const __GXX_ABI_VERSION: u32 = 1002;
pub const __ATOMIC_RELAXED: u32 = 0;
pub const __ATOMIC_CONSUME: u32 = 1;
pub const __ATOMIC_ACQUIRE: u32 = 2;
pub const __ATOMIC_RELEASE: u32 = 3;
pub const __ATOMIC_ACQ_REL: u32 = 4;
pub const __ATOMIC_SEQ_CST: u32 = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
pub const __VERSION__: &'static [u8; 14usize] = b"Clang 10.0.0 \0";
pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
pub const __CONSTANT_CFSTRINGS__: u32 = 1;
pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
pub const __BYTE_ORDER__: u32 = 1234;
pub const __LITTLE_ENDIAN__: u32 = 1;
pub const _LP64: u32 = 1;
pub const __LP64__: u32 = 1;
pub const __CHAR_BIT__: u32 = 8;
pub const __SCHAR_MAX__: u32 = 127;
pub const __SHRT_MAX__: u32 = 32767;
pub const __INT_MAX__: u32 = 2147483647;
pub const __LONG_MAX__: u64 = 9223372036854775807;
pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
pub const __WCHAR_MAX__: u32 = 2147483647;
pub const __WINT_MAX__: u32 = 4294967295;
pub const __INTMAX_MAX__: u64 = 9223372036854775807;
pub const __SIZE_MAX__: i32 = -1;
pub const __UINTMAX_MAX__: i32 = -1;
pub const __PTRDIFF_MAX__: u64 = 9223372036854775807;
pub const __INTPTR_MAX__: u64 = 9223372036854775807;
pub const __UINTPTR_MAX__: i32 = -1;
pub const __SIZEOF_DOUBLE__: u32 = 8;
pub const __SIZEOF_FLOAT__: u32 = 4;
pub const __SIZEOF_INT__: u32 = 4;
pub const __SIZEOF_LONG__: u32 = 8;
pub const __SIZEOF_LONG_DOUBLE__: u32 = 16;
pub const __SIZEOF_LONG_LONG__: u32 = 8;
pub const __SIZEOF_POINTER__: u32 = 8;
pub const __SIZEOF_SHORT__: u32 = 2;
pub const __SIZEOF_PTRDIFF_T__: u32 = 8;
pub const __SIZEOF_SIZE_T__: u32 = 8;
pub const __SIZEOF_WCHAR_T__: u32 = 4;
pub const __SIZEOF_WINT_T__: u32 = 4;
pub const __SIZEOF_INT128__: u32 = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INTMAX_WIDTH__: u32 = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __PTRDIFF_WIDTH__: u32 = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __INTPTR_WIDTH__: u32 = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __SIZE_WIDTH__: u32 = 64;
pub const __WCHAR_WIDTH__: u32 = 32;
pub const __WINT_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
pub const __UINTMAX_WIDTH__: u32 = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINTPTR_WIDTH__: u32 = 64;
pub const __FLT_HAS_DENORM__: u32 = 1;
pub const __FLT_DIG__: u32 = 6;
pub const __FLT_DECIMAL_DIG__: u32 = 9;
pub const __FLT_HAS_INFINITY__: u32 = 1;
pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT_MANT_DIG__: u32 = 24;
pub const __FLT_MAX_10_EXP__: u32 = 38;
pub const __FLT_MAX_EXP__: u32 = 128;
pub const __FLT_MIN_10_EXP__: i32 = -37;
pub const __FLT_MIN_EXP__: i32 = -125;
pub const __DBL_HAS_DENORM__: u32 = 1;
pub const __DBL_DIG__: u32 = 15;
pub const __DBL_DECIMAL_DIG__: u32 = 17;
pub const __DBL_HAS_INFINITY__: u32 = 1;
pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
pub const __DBL_MANT_DIG__: u32 = 53;
pub const __DBL_MAX_10_EXP__: u32 = 308;
pub const __DBL_MAX_EXP__: u32 = 1024;
pub const __DBL_MIN_10_EXP__: i32 = -307;
pub const __DBL_MIN_EXP__: i32 = -1021;
pub const __LDBL_HAS_DENORM__: u32 = 1;
pub const __LDBL_DIG__: u32 = 18;
pub const __LDBL_DECIMAL_DIG__: u32 = 21;
pub const __LDBL_HAS_INFINITY__: u32 = 1;
pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
pub const __LDBL_MANT_DIG__: u32 = 64;
pub const __LDBL_MAX_10_EXP__: u32 = 4932;
pub const __LDBL_MAX_EXP__: u32 = 16384;
pub const __LDBL_MIN_10_EXP__: i32 = -4931;
pub const __LDBL_MIN_EXP__: i32 = -16381;
pub const __POINTER_WIDTH__: u32 = 64;
pub const __BIGGEST_ALIGNMENT__: u32 = 16;
pub const __WINT_UNSIGNED__: u32 = 1;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __UINT8_MAX__: u32 = 255;
pub const __INT8_MAX__: u32 = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __UINT16_MAX__: u32 = 65535;
pub const __INT16_MAX__: u32 = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __UINT32_MAX__: u32 = 4294967295;
pub const __INT32_MAX__: u32 = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __UINT64_MAX__: i32 = -1;
pub const __INT64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST8_MAX__: u32 = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_LEAST8_MAX__: u32 = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_LEAST16_MAX__: u32 = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_LEAST16_MAX__: u32 = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_LEAST32_MAX__: u32 = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_LEAST64_MAX__: i32 = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __INT_FAST8_MAX__: u32 = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_FAST8_MAX__: u32 = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_FAST16_MAX__: u32 = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_FAST16_MAX__: u32 = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_FAST32_MAX__: u32 = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_FAST32_MAX__: u32 = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\0";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\0";
pub const __UINT_FAST64_MAX__: i32 = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\0";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\0";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\0";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\0";
pub const __FINITE_MATH_ONLY__: u32 = 0;
pub const __GNUC_STDC_INLINE__: u32 = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: u32 = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __NO_INLINE__: u32 = 1;
pub const __FLT_EVAL_METHOD__: u32 = 0;
pub const __FLT_RADIX__: u32 = 2;
pub const __DECIMAL_DIG__: u32 = 21;
pub const __GCC_ASM_FLAG_OUTPUTS__: u32 = 1;
pub const __code_model_small_: u32 = 1;
pub const __amd64__: u32 = 1;
pub const __amd64: u32 = 1;
pub const __x86_64: u32 = 1;
pub const __x86_64__: u32 = 1;
pub const __SEG_GS: u32 = 1;
pub const __SEG_FS: u32 = 1;
pub const __k8: u32 = 1;
pub const __k8__: u32 = 1;
pub const __tune_k8__: u32 = 1;
pub const __NO_MATH_INLINES: u32 = 1;
pub const __FXSR__: u32 = 1;
pub const __SSE2__: u32 = 1;
pub const __SSE2_MATH__: u32 = 1;
pub const __SSE__: u32 = 1;
pub const __SSE_MATH__: u32 = 1;
pub const __MMX__: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
pub const __SIZEOF_FLOAT128__: u32 = 16;
pub const unix: u32 = 1;
pub const __unix: u32 = 1;
pub const __unix__: u32 = 1;
pub const linux: u32 = 1;
pub const __linux: u32 = 1;
pub const __linux__: u32 = 1;
pub const __ELF__: u32 = 1;
pub const __gnu_linux__: u32 = 1;
pub const __FLOAT128__: u32 = 1;
pub const __STDC__: u32 = 1;
pub const __STDC_HOSTED__: u32 = 1;
pub const __STDC_VERSION__: u32 = 201112;
pub const __STDC_UTF_16__: u32 = 1;
pub const __STDC_UTF_32__: u32 = 1;
pub const _WCHAR_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const WCHAR_MIN: i32 = -2147483648;
pub const WCHAR_MAX: u32 = 2147483647;
pub const WEOF: u32 = 4294967295;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const ULLONG_MAX: i32 = -1;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const SCHAR_MAX: u32 = 127;
pub const SHRT_MAX: u32 = 32767;
pub const INT_MAX: u32 = 2147483647;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const SCHAR_MIN: i32 = -128;
pub const SHRT_MIN: i32 = -32768;
pub const INT_MIN: i32 = -2147483648;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const UCHAR_MAX: u32 = 255;
pub const USHRT_MAX: u32 = 65535;
pub const UINT_MAX: u32 = 4294967295;
pub const ULONG_MAX: i32 = -1;
pub const CHAR_BIT: u32 = 8;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_SIGNUM_H: u32 = 1;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 23;
pub const SIGIOT: u32 = 6;
pub const SIGCLD: u32 = 20;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 32;
pub const _NSIG: u32 = 33;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const NSIG: u32 = 33;
pub const _BITS_SIGACTION_H: u32 = 1;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const __NGREG: u32 = 23;
pub const NGREG: u32 = 23;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const PRINTF_INT64_MODIFIER: &'static [u8; 2usize] = b"l\0";
pub const PRINTF_INT32_MODIFIER: &'static [u8; 1usize] = b"\0";
pub const PRINTF_INT16_MODIFIER: &'static [u8; 2usize] = b"h\0";
pub const PRINTF_INTMAX_MODIFIER: &'static [u8; 2usize] = b"l\0";
pub const PRINTF_INT64_HEX_WIDTH: &'static [u8; 3usize] = b"16\0";
pub const PRINTF_UINT64_HEX_WIDTH: &'static [u8; 3usize] = b"16\0";
pub const PRINTF_INT32_HEX_WIDTH: &'static [u8; 2usize] = b"8\0";
pub const PRINTF_UINT32_HEX_WIDTH: &'static [u8; 2usize] = b"8\0";
pub const PRINTF_INT16_HEX_WIDTH: &'static [u8; 2usize] = b"4\0";
pub const PRINTF_UINT16_HEX_WIDTH: &'static [u8; 2usize] = b"4\0";
pub const PRINTF_INT8_HEX_WIDTH: &'static [u8; 2usize] = b"2\0";
pub const PRINTF_UINT8_HEX_WIDTH: &'static [u8; 2usize] = b"2\0";
pub const PRINTF_INT64_DEC_WIDTH: &'static [u8; 3usize] = b"19\0";
pub const PRINTF_UINT64_DEC_WIDTH: &'static [u8; 3usize] = b"20\0";
pub const PRINTF_INT32_DEC_WIDTH: &'static [u8; 3usize] = b"10\0";
pub const PRINTF_UINT32_DEC_WIDTH: &'static [u8; 3usize] = b"10\0";
pub const PRINTF_INT16_DEC_WIDTH: &'static [u8; 2usize] = b"5\0";
pub const PRINTF_UINT16_DEC_WIDTH: &'static [u8; 2usize] = b"5\0";
pub const PRINTF_INT8_DEC_WIDTH: &'static [u8; 2usize] = b"3\0";
pub const PRINTF_UINT8_DEC_WIDTH: &'static [u8; 2usize] = b"3\0";
pub const PRINTF_INTMAX_HEX_WIDTH: &'static [u8; 3usize] = b"16\0";
pub const PRINTF_UINTMAX_HEX_WIDTH: &'static [u8; 3usize] = b"16\0";
pub const PRINTF_INTMAX_DEC_WIDTH: &'static [u8; 3usize] = b"20\0";
pub const PRINTF_UINTMAX_DEC_WIDTH: &'static [u8; 3usize] = b"20\0";
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const TCOD_HEXVERSION: u32 = 67075;
pub const TCOD_STRVERSION: &'static [u8; 6usize] = b"1.6.3\0";
pub const TCOD_TECHVERSION: u32 = 17171200;
pub const TCOD_STRVERSIONNAME: &'static [u8; 14usize] = b"libtcod 1.6.3\0";
pub const TCOD_KEY_TEXT_SIZE: u32 = 32;
pub const TCOD_NOISE_MAX_OCTAVES: u32 = 128;
pub const TCOD_NOISE_MAX_DIMENSIONS: u32 = 4;
pub const TCOD_NOISE_DEFAULT_HURST: f64 = 0.5;
pub const TCOD_NOISE_DEFAULT_LACUNARITY: f64 = 2.0;
pub const TCOD_LEX_FLAG_NOCASE: u32 = 1;
pub const TCOD_LEX_FLAG_NESTING_COMMENT: u32 = 2;
pub const TCOD_LEX_FLAG_TOKENIZE_COMMENTS: u32 = 4;
pub const TCOD_LEX_ERROR: i32 = -1;
pub const TCOD_LEX_UNKNOWN: u32 = 0;
pub const TCOD_LEX_SYMBOL: u32 = 1;
pub const TCOD_LEX_KEYWORD: u32 = 2;
pub const TCOD_LEX_IDEN: u32 = 3;
pub const TCOD_LEX_STRING: u32 = 4;
pub const TCOD_LEX_INTEGER: u32 = 5;
pub const TCOD_LEX_FLOAT: u32 = 6;
pub const TCOD_LEX_CHAR: u32 = 7;
pub const TCOD_LEX_EOF: u32 = 8;
pub const TCOD_LEX_COMMENT: u32 = 9;
pub const TCOD_LEX_MAX_SYMBOLS: u32 = 100;
pub const TCOD_LEX_SYMBOL_SIZE: u32 = 5;
pub const TCOD_LEX_MAX_KEYWORDS: u32 = 100;
pub const TCOD_LEX_KEYWORD_SIZE: u32 = 20;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wint_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type mbstate_t = __mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    _unused: [u8; 0],
}
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
impl Default for __locale_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wcscpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncat(__dest: *mut wchar_t, __src: *const wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const wchar_t, __s2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const wchar_t, __s2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut wchar_t, __s2: *const wchar_t, __n: size_t) -> size_t;
}
extern "C" {
    pub fn wcscoll_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        __s1: *mut wchar_t,
        __s2: *const wchar_t,
        __n: size_t,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsdup(__s: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        __wcs: *const ::std::os::raw::c_int,
        __wc: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const wchar_t, __wc: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(__wcs: *const wchar_t, __reject: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcsspn(__wcs: *const wchar_t, __accept: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const wchar_t, __accept: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(__haystack: *const wchar_t, __needle: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(
        __s: *mut wchar_t,
        __delim: *const wchar_t,
        __ptr: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslen(__s: *const ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsnlen(__s: *const wchar_t, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn wmemchr(
        __s: *const ::std::os::raw::c_int,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(
        __s1: *mut ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemmove(
        __s1: *mut ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemset(__s: *mut wchar_t, __c: wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
        __p: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: wchar_t, __ps: *mut mbstate_t)
        -> size_t;
}
extern "C" {
    pub fn __mbrlen(
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: size_t, __ps: *mut mbstate_t) -> size_t;
}
extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ::std::os::raw::c_char,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const wchar_t,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ::std::os::raw::c_char,
        __nmc: size_t,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const wchar_t,
        __nwc: size_t,
        __len: size_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstod(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstol(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut wchar_t, __sizeloc: *mut size_t) -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(
        __s: *mut wchar_t,
        __n: size_t,
        __format: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        __s: *mut wchar_t,
        __n: size_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const wchar_t, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fwscanf"]
    pub fn fwscanf1(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_wscanf"]
    pub fn wscanf1(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_swscanf"]
    pub fn swscanf1(__s: *const wchar_t, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfwscanf"]
    pub fn vfwscanf1(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vwscanf"]
    pub fn vwscanf1(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vswscanf"]
    pub fn vswscanf1(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: wchar_t) -> wint_t;
}
extern "C" {
    pub fn fgetws(
        __ws: *mut wchar_t,
        __n: ::std::os::raw::c_int,
        __stream: *mut __FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(__ws: *const wchar_t, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn wcsftime(
        __s: *mut wchar_t,
        __maxsize: size_t,
        __format: *const wchar_t,
        __tp: *const tm,
    ) -> size_t;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
pub type pid_t = __pid_t;
pub type uid_t = __uid_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
impl Default for sigval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
    _bindgen_union_align: [u64; 14usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_tid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_overrun as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>())).si_sigval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval)
        )
    );
}
impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>())).si_sigval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval)
        )
    );
}
impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_pid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_uid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_status as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_utime as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>())).si_stime as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            >()))
            ._lower as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_lower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
            >()))
            ._upper as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_upper)
        )
    );
}
impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))
                ._addr_bnd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_addr_bnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()))._pkey
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_pkey)
        )
    );
}
impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>())).si_addr_lsb
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()))._bounds as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_bounds)
        )
    );
}
impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_band as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>())).si_fd as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._call_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._syscall as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))._arch as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch)
        )
    );
}
impl Default for siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._kill as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._timer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._rt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigchld as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigfault as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigpoll as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigsys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys)
        )
    );
}
impl Default for siginfo_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>())).__pad0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<siginfo_t>()))._sifields as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(_sifields)
        )
    );
}
impl Default for siginfo_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const SI_ASYNCNL: _bindgen_ty_1 = _bindgen_ty_1::SI_ASYNCNL;
pub const SI_DETHREAD: _bindgen_ty_1 = _bindgen_ty_1::SI_DETHREAD;
pub const SI_TKILL: _bindgen_ty_1 = _bindgen_ty_1::SI_TKILL;
pub const SI_SIGIO: _bindgen_ty_1 = _bindgen_ty_1::SI_SIGIO;
pub const SI_ASYNCIO: _bindgen_ty_1 = _bindgen_ty_1::SI_ASYNCIO;
pub const SI_MESGQ: _bindgen_ty_1 = _bindgen_ty_1::SI_MESGQ;
pub const SI_TIMER: _bindgen_ty_1 = _bindgen_ty_1::SI_TIMER;
pub const SI_QUEUE: _bindgen_ty_1 = _bindgen_ty_1::SI_QUEUE;
pub const SI_USER: _bindgen_ty_1 = _bindgen_ty_1::SI_USER;
pub const SI_KERNEL: _bindgen_ty_1 = _bindgen_ty_1::SI_KERNEL;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    SI_ASYNCNL = -60,
    SI_DETHREAD = -7,
    SI_TKILL = -6,
    SI_SIGIO = -5,
    SI_ASYNCIO = -4,
    SI_MESGQ = -3,
    SI_TIMER = -2,
    SI_QUEUE = -1,
    SI_USER = 0,
    SI_KERNEL = 128,
}
pub const ILL_ILLOPC: _bindgen_ty_2 = _bindgen_ty_2::ILL_ILLOPC;
pub const ILL_ILLOPN: _bindgen_ty_2 = _bindgen_ty_2::ILL_ILLOPN;
pub const ILL_ILLADR: _bindgen_ty_2 = _bindgen_ty_2::ILL_ILLADR;
pub const ILL_ILLTRP: _bindgen_ty_2 = _bindgen_ty_2::ILL_ILLTRP;
pub const ILL_PRVOPC: _bindgen_ty_2 = _bindgen_ty_2::ILL_PRVOPC;
pub const ILL_PRVREG: _bindgen_ty_2 = _bindgen_ty_2::ILL_PRVREG;
pub const ILL_COPROC: _bindgen_ty_2 = _bindgen_ty_2::ILL_COPROC;
pub const ILL_BADSTK: _bindgen_ty_2 = _bindgen_ty_2::ILL_BADSTK;
pub const ILL_BADIADDR: _bindgen_ty_2 = _bindgen_ty_2::ILL_BADIADDR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    ILL_ILLOPC = 1,
    ILL_ILLOPN = 2,
    ILL_ILLADR = 3,
    ILL_ILLTRP = 4,
    ILL_PRVOPC = 5,
    ILL_PRVREG = 6,
    ILL_COPROC = 7,
    ILL_BADSTK = 8,
    ILL_BADIADDR = 9,
}
pub const FPE_INTDIV: _bindgen_ty_3 = _bindgen_ty_3::FPE_INTDIV;
pub const FPE_INTOVF: _bindgen_ty_3 = _bindgen_ty_3::FPE_INTOVF;
pub const FPE_FLTDIV: _bindgen_ty_3 = _bindgen_ty_3::FPE_FLTDIV;
pub const FPE_FLTOVF: _bindgen_ty_3 = _bindgen_ty_3::FPE_FLTOVF;
pub const FPE_FLTUND: _bindgen_ty_3 = _bindgen_ty_3::FPE_FLTUND;
pub const FPE_FLTRES: _bindgen_ty_3 = _bindgen_ty_3::FPE_FLTRES;
pub const FPE_FLTINV: _bindgen_ty_3 = _bindgen_ty_3::FPE_FLTINV;
pub const FPE_FLTSUB: _bindgen_ty_3 = _bindgen_ty_3::FPE_FLTSUB;
pub const FPE_FLTUNK: _bindgen_ty_3 = _bindgen_ty_3::FPE_FLTUNK;
pub const FPE_CONDTRAP: _bindgen_ty_3 = _bindgen_ty_3::FPE_CONDTRAP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 {
    FPE_INTDIV = 1,
    FPE_INTOVF = 2,
    FPE_FLTDIV = 3,
    FPE_FLTOVF = 4,
    FPE_FLTUND = 5,
    FPE_FLTRES = 6,
    FPE_FLTINV = 7,
    FPE_FLTSUB = 8,
    FPE_FLTUNK = 14,
    FPE_CONDTRAP = 15,
}
pub const SEGV_MAPERR: _bindgen_ty_4 = _bindgen_ty_4::SEGV_MAPERR;
pub const SEGV_ACCERR: _bindgen_ty_4 = _bindgen_ty_4::SEGV_ACCERR;
pub const SEGV_BNDERR: _bindgen_ty_4 = _bindgen_ty_4::SEGV_BNDERR;
pub const SEGV_PKUERR: _bindgen_ty_4 = _bindgen_ty_4::SEGV_PKUERR;
pub const SEGV_ACCADI: _bindgen_ty_4 = _bindgen_ty_4::SEGV_ACCADI;
pub const SEGV_ADIDERR: _bindgen_ty_4 = _bindgen_ty_4::SEGV_ADIDERR;
pub const SEGV_ADIPERR: _bindgen_ty_4 = _bindgen_ty_4::SEGV_ADIPERR;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_4 {
    SEGV_MAPERR = 1,
    SEGV_ACCERR = 2,
    SEGV_BNDERR = 3,
    SEGV_PKUERR = 4,
    SEGV_ACCADI = 5,
    SEGV_ADIDERR = 6,
    SEGV_ADIPERR = 7,
}
pub const BUS_ADRALN: _bindgen_ty_5 = _bindgen_ty_5::BUS_ADRALN;
pub const BUS_ADRERR: _bindgen_ty_5 = _bindgen_ty_5::BUS_ADRERR;
pub const BUS_OBJERR: _bindgen_ty_5 = _bindgen_ty_5::BUS_OBJERR;
pub const BUS_MCEERR_AR: _bindgen_ty_5 = _bindgen_ty_5::BUS_MCEERR_AR;
pub const BUS_MCEERR_AO: _bindgen_ty_5 = _bindgen_ty_5::BUS_MCEERR_AO;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_5 {
    BUS_ADRALN = 1,
    BUS_ADRERR = 2,
    BUS_OBJERR = 3,
    BUS_MCEERR_AR = 4,
    BUS_MCEERR_AO = 5,
}
pub const CLD_EXITED: _bindgen_ty_6 = _bindgen_ty_6::CLD_EXITED;
pub const CLD_KILLED: _bindgen_ty_6 = _bindgen_ty_6::CLD_KILLED;
pub const CLD_DUMPED: _bindgen_ty_6 = _bindgen_ty_6::CLD_DUMPED;
pub const CLD_TRAPPED: _bindgen_ty_6 = _bindgen_ty_6::CLD_TRAPPED;
pub const CLD_STOPPED: _bindgen_ty_6 = _bindgen_ty_6::CLD_STOPPED;
pub const CLD_CONTINUED: _bindgen_ty_6 = _bindgen_ty_6::CLD_CONTINUED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_6 {
    CLD_EXITED = 1,
    CLD_KILLED = 2,
    CLD_DUMPED = 3,
    CLD_TRAPPED = 4,
    CLD_STOPPED = 5,
    CLD_CONTINUED = 6,
}
pub const POLL_IN: _bindgen_ty_7 = _bindgen_ty_7::POLL_IN;
pub const POLL_OUT: _bindgen_ty_7 = _bindgen_ty_7::POLL_OUT;
pub const POLL_MSG: _bindgen_ty_7 = _bindgen_ty_7::POLL_MSG;
pub const POLL_ERR: _bindgen_ty_7 = _bindgen_ty_7::POLL_ERR;
pub const POLL_PRI: _bindgen_ty_7 = _bindgen_ty_7::POLL_PRI;
pub const POLL_HUP: _bindgen_ty_7 = _bindgen_ty_7::POLL_HUP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_7 {
    POLL_IN = 1,
    POLL_OUT = 2,
    POLL_MSG = 3,
    POLL_ERR = 4,
    POLL_PRI = 5,
    POLL_HUP = 6,
}
pub type sigval_t = __sigval_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._function as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._attribute as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_attribute)
        )
    );
}
impl Default for sigevent__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._tid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._sigev_thread as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_sigev_thread)
        )
    );
}
impl Default for sigevent__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        64usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>()))._sigev_un as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(_sigev_un)
        )
    );
}
impl Default for sigevent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_8 = _bindgen_ty_8::SIGEV_SIGNAL;
pub const SIGEV_NONE: _bindgen_ty_8 = _bindgen_ty_8::SIGEV_NONE;
pub const SIGEV_THREAD: _bindgen_ty_8 = _bindgen_ty_8::SIGEV_THREAD;
pub const SIGEV_THREAD_ID: _bindgen_ty_8 = _bindgen_ty_8::SIGEV_THREAD_ID;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_8 {
    SIGEV_SIGNAL = 0,
    SIGEV_NONE = 1,
    SIGEV_THREAD = 2,
    SIGEV_THREAD_ID = 4,
}
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
        -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_handler as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_sigaction as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_sigaction)
        )
    );
}
impl Default for sigaction__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        152usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).__sigaction_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_restorer as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_restorer)
        )
    );
}
impl Default for sigaction {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub __glibc_reserved1: [__uint32_t; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    assert_eq!(
        ::std::mem::size_of::<_fpx_sw_bytes>(),
        48usize,
        concat!("Size of: ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpx_sw_bytes>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).magic1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(magic1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).extended_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(extended_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_bv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpx_sw_bytes>())).__glibc_reserved1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__fpreg() {
    assert_eq!(
        ::std::mem::size_of::<_fpreg>(),
        10usize,
        concat!("Size of: ", stringify!(_fpreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(exponent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__fpxreg() {
    assert_eq!(
        ::std::mem::size_of::<_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpxreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpxreg>())).__glibc_reserved1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__xmmreg() {
    assert_eq!(
        ::std::mem::size_of::<_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_xmmreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmmreg>())).element as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__fpstate() {
    assert_eq!(
        ::std::mem::size_of::<_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).cwd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).swd as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).ftw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).fop as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).rip as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).rdp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).mxcsr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).mxcr_mask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>()))._st as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>()))._xmm as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fpstate>())).__glibc_reserved1 as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigcontext__bindgen_ty_1 {
    pub fpstate: *mut _fpstate,
    pub __fpstate_word: __uint64_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).fpstate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).__fpstate_word as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(__fpstate_word)
        )
    );
}
impl Default for sigcontext__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_sigcontext() {
    assert_eq!(
        ::std::mem::size_of::<sigcontext>(),
        256usize,
        concat!("Size of: ", stringify!(sigcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r9 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r10 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r11 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r12 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r13 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r14 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).r15 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rdi as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rsi as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rbp as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rbx as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rdx as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rax as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rcx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rcx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rsp as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).rip as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).eflags as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).cs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).gs as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(gs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).fs as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).__pad0 as *const _ as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).err as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).trapno as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(trapno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).oldmask as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(oldmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).cr2 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cr2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).__reserved1 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__reserved1)
        )
    );
}
impl Default for sigcontext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub __glibc_reserved1: [__uint64_t; 2usize],
    pub __glibc_reserved2: [__uint64_t; 5usize],
}
#[test]
fn bindgen_test_layout__xsave_hdr() {
    assert_eq!(
        ::std::mem::size_of::<_xsave_hdr>(),
        64usize,
        concat!("Size of: ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsave_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).xstate_bv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).__glibc_reserved1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xsave_hdr>())).__glibc_reserved2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout__ymmh_state() {
    assert_eq!(
        ::std::mem::size_of::<_ymmh_state>(),
        256usize,
        concat!("Size of: ", stringify!(_ymmh_state))
    );
    assert_eq!(
        ::std::mem::align_of::<_ymmh_state>(),
        4usize,
        concat!("Alignment of ", stringify!(_ymmh_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ymmh_state>())).ymmh_space as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ymmh_state),
            "::",
            stringify!(ymmh_space)
        )
    );
}
impl Default for _ymmh_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[test]
fn bindgen_test_layout__xstate() {
    assert_eq!(
        ::std::mem::size_of::<_xstate>(),
        832usize,
        concat!("Size of: ", stringify!(_xstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_xstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_xstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).fpstate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).xstate_hdr as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(xstate_hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xstate>())).ymmh as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(ymmh)
        )
    );
}
impl Default for _xstate {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: size_t,
}
#[test]
fn bindgen_test_layout_stack_t() {
    assert_eq!(
        ::std::mem::size_of::<stack_t>(),
        24usize,
        concat!("Size of: ", stringify!(stack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(stack_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_t>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_t>())).ss_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stack_t>())).ss_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_size)
        )
    );
}
impl Default for stack_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__libc_fpxreg() {
    assert_eq!(
        ::std::mem::size_of::<_libc_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).significand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).exponent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpxreg>())).__glibc_reserved1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__libc_xmmreg() {
    assert_eq!(
        ::std::mem::size_of::<_libc_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_xmmreg>())).element as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    assert_eq!(
        ::std::mem::size_of::<_libc_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).cwd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).swd as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).ftw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).fop as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).rip as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).rdp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).mxcsr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).mxcr_mask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>()))._st as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>()))._xmm as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_libc_fpstate>())).__glibc_reserved1 as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    assert_eq!(
        ::std::mem::size_of::<mcontext_t>(),
        256usize,
        concat!("Size of: ", stringify!(mcontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mcontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mcontext_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).gregs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(gregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).fpregs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(fpregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcontext_t>())).__reserved1 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(__reserved1)
        )
    );
}
impl Default for mcontext_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: sigset_t,
    pub __fpregs_mem: _libc_fpstate,
    pub __ssp: [::std::os::raw::c_ulonglong; 4usize],
}
#[test]
fn bindgen_test_layout_ucontext_t() {
    assert_eq!(
        ::std::mem::size_of::<ucontext_t>(),
        968usize,
        concat!("Size of: ", stringify!(ucontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ucontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ucontext_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_stack as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_mcontext as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_mcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).uc_sigmask as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).__fpregs_mem as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__fpregs_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ucontext_t>())).__ssp as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__ssp)
        )
    );
}
impl Default for ucontext_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const SS_ONSTACK: _bindgen_ty_9 = _bindgen_ty_9::SS_ONSTACK;
pub const SS_DISABLE: _bindgen_ty_9 = _bindgen_ty_9::SS_DISABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_9 {
    SS_ONSTACK = 1,
    SS_DISABLE = 2,
}
extern "C" {
    pub fn sigaltstack(__ss: *const stack_t, __oss: *mut stack_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
impl Default for sigstack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_slist {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_condattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
extern "C" {
    pub fn TCOD_strdup(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_strcasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_strncasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: size_t,
    ) -> ::std::os::raw::c_int;
}
pub type TCOD_line_listener_t = ::std::option::Option<
    unsafe extern "C" fn(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) -> bool,
>;
extern "C" {
    pub fn TCOD_line_init(
        xFrom: ::std::os::raw::c_int,
        yFrom: ::std::os::raw::c_int,
        xTo: ::std::os::raw::c_int,
        yTo: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_line_step(
        xCur: *mut ::std::os::raw::c_int,
        yCur: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_line(
        xFrom: ::std::os::raw::c_int,
        yFrom: ::std::os::raw::c_int,
        xTo: ::std::os::raw::c_int,
        yTo: ::std::os::raw::c_int,
        listener: TCOD_line_listener_t,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_bresenham_data_t {
    pub stepx: ::std::os::raw::c_int,
    pub stepy: ::std::os::raw::c_int,
    pub e: ::std::os::raw::c_int,
    pub deltax: ::std::os::raw::c_int,
    pub deltay: ::std::os::raw::c_int,
    pub origx: ::std::os::raw::c_int,
    pub origy: ::std::os::raw::c_int,
    pub destx: ::std::os::raw::c_int,
    pub desty: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TCOD_bresenham_data_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_bresenham_data_t>(),
        36usize,
        concat!("Size of: ", stringify!(TCOD_bresenham_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_bresenham_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_bresenham_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).stepx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(stepx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).stepy as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(stepy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).e as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).deltax as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(deltax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).deltay as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(deltay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).origx as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(origx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).origy as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(origy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).destx as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(destx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).desty as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(desty)
        )
    );
}
extern "C" {
    pub fn TCOD_line_init_mt(
        xFrom: ::std::os::raw::c_int,
        yFrom: ::std::os::raw::c_int,
        xTo: ::std::os::raw::c_int,
        yTo: ::std::os::raw::c_int,
        data: *mut TCOD_bresenham_data_t,
    );
}
extern "C" {
    pub fn TCOD_line_step_mt(
        xCur: *mut ::std::os::raw::c_int,
        yCur: *mut ::std::os::raw::c_int,
        data: *mut TCOD_bresenham_data_t,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_line_mt(
        xFrom: ::std::os::raw::c_int,
        yFrom: ::std::os::raw::c_int,
        xTo: ::std::os::raw::c_int,
        yTo: ::std::os::raw::c_int,
        listener: TCOD_line_listener_t,
        data: *mut TCOD_bresenham_data_t,
    ) -> bool;
}
pub type TCOD_random_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_dice_t {
    pub nb_rolls: ::std::os::raw::c_int,
    pub nb_faces: ::std::os::raw::c_int,
    pub multiplier: f32,
    pub addsub: f32,
}
#[test]
fn bindgen_test_layout_TCOD_dice_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_dice_t>(),
        16usize,
        concat!("Size of: ", stringify!(TCOD_dice_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_dice_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_dice_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_dice_t>())).nb_rolls as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_dice_t),
            "::",
            stringify!(nb_rolls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_dice_t>())).nb_faces as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_dice_t),
            "::",
            stringify!(nb_faces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_dice_t>())).multiplier as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_dice_t),
            "::",
            stringify!(multiplier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_dice_t>())).addsub as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_dice_t),
            "::",
            stringify!(addsub)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_random_algo_t {
    TCOD_RNG_MT = 0,
    TCOD_RNG_CMWC = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_distribution_t {
    TCOD_DISTRIBUTION_LINEAR = 0,
    TCOD_DISTRIBUTION_GAUSSIAN = 1,
    TCOD_DISTRIBUTION_GAUSSIAN_RANGE = 2,
    TCOD_DISTRIBUTION_GAUSSIAN_INVERSE = 3,
    TCOD_DISTRIBUTION_GAUSSIAN_RANGE_INVERSE = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TCOD_tree_t {
    pub next: *mut _TCOD_tree_t,
    pub father: *mut _TCOD_tree_t,
    pub sons: *mut _TCOD_tree_t,
}
#[test]
fn bindgen_test_layout__TCOD_tree_t() {
    assert_eq!(
        ::std::mem::size_of::<_TCOD_tree_t>(),
        24usize,
        concat!("Size of: ", stringify!(_TCOD_tree_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_TCOD_tree_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_TCOD_tree_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TCOD_tree_t>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TCOD_tree_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TCOD_tree_t>())).father as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TCOD_tree_t),
            "::",
            stringify!(father)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TCOD_tree_t>())).sons as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TCOD_tree_t),
            "::",
            stringify!(sons)
        )
    );
}
impl Default for _TCOD_tree_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_tree_t = _TCOD_tree_t;
extern "C" {
    pub fn TCOD_tree_new() -> *mut TCOD_tree_t;
}
extern "C" {
    pub fn TCOD_tree_add_son(node: *mut TCOD_tree_t, son: *mut TCOD_tree_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_bsp_t {
    pub tree: TCOD_tree_t,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub position: ::std::os::raw::c_int,
    pub level: u8,
    pub horizontal: bool,
}
#[test]
fn bindgen_test_layout_TCOD_bsp_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_bsp_t>(),
        48usize,
        concat!("Size of: ", stringify!(TCOD_bsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_bsp_t>(),
        8usize,
        concat!("Alignment of ", stringify!(TCOD_bsp_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).tree as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).x as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).y as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).w as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).h as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).position as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).level as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).horizontal as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(horizontal)
        )
    );
}
impl Default for TCOD_bsp_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_bsp_callback_t = ::std::option::Option<
    unsafe extern "C" fn(node: *mut TCOD_bsp_t, userData: *mut ::std::os::raw::c_void) -> bool,
>;
extern "C" {
    pub fn TCOD_bsp_new() -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_new_with_size(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_delete(node: *mut TCOD_bsp_t);
}
extern "C" {
    pub fn TCOD_bsp_left(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_right(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_father(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_is_leaf(node: *mut TCOD_bsp_t) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_pre_order(
        node: *mut TCOD_bsp_t,
        listener: TCOD_bsp_callback_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_in_order(
        node: *mut TCOD_bsp_t,
        listener: TCOD_bsp_callback_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_post_order(
        node: *mut TCOD_bsp_t,
        listener: TCOD_bsp_callback_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_level_order(
        node: *mut TCOD_bsp_t,
        listener: TCOD_bsp_callback_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_inverted_level_order(
        node: *mut TCOD_bsp_t,
        listener: TCOD_bsp_callback_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_contains(
        node: *mut TCOD_bsp_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_find_node(
        node: *mut TCOD_bsp_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_resize(
        node: *mut TCOD_bsp_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_bsp_split_once(
        node: *mut TCOD_bsp_t,
        horizontal: bool,
        position: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_bsp_split_recursive(
        node: *mut TCOD_bsp_t,
        randomizer: TCOD_random_t,
        nb: ::std::os::raw::c_int,
        minHSize: ::std::os::raw::c_int,
        minVSize: ::std::os::raw::c_int,
        maxHRatio: f32,
        maxVRatio: f32,
    );
}
extern "C" {
    pub fn TCOD_bsp_remove_sons(node: *mut TCOD_bsp_t);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_color_t {
    pub r: u8,
    pub g: u8,
    pub b: u8,
}
#[test]
fn bindgen_test_layout_TCOD_color_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_color_t>(),
        3usize,
        concat!("Size of: ", stringify!(TCOD_color_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_color_t>(),
        1usize,
        concat!("Alignment of ", stringify!(TCOD_color_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_color_t>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_color_t),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_color_t>())).g as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_color_t),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_color_t>())).b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_color_t),
            "::",
            stringify!(b)
        )
    );
}
extern "C" {
    pub fn TCOD_color_RGB(r: u8, g: u8, b: u8) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_HSV(h: f32, s: f32, v: f32) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_equals(c1: TCOD_color_t, c2: TCOD_color_t) -> bool;
}
extern "C" {
    pub fn TCOD_color_add(c1: TCOD_color_t, c2: TCOD_color_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_subtract(c1: TCOD_color_t, c2: TCOD_color_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_multiply(c1: TCOD_color_t, c2: TCOD_color_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_multiply_scalar(c1: TCOD_color_t, value: f32) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_lerp(c1: TCOD_color_t, c2: TCOD_color_t, coef: f32) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_set_HSV(c: *mut TCOD_color_t, h: f32, s: f32, v: f32);
}
extern "C" {
    pub fn TCOD_color_get_HSV(c: TCOD_color_t, h: *mut f32, s: *mut f32, v: *mut f32);
}
extern "C" {
    pub fn TCOD_color_get_hue(c: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_hue(c: *mut TCOD_color_t, h: f32);
}
extern "C" {
    pub fn TCOD_color_get_saturation(c: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_saturation(c: *mut TCOD_color_t, s: f32);
}
extern "C" {
    pub fn TCOD_color_get_value(c: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_value(c: *mut TCOD_color_t, v: f32);
}
extern "C" {
    pub fn TCOD_color_shift_hue(c: *mut TCOD_color_t, hshift: f32);
}
extern "C" {
    pub fn TCOD_color_scale_HSV(c: *mut TCOD_color_t, scoef: f32, vcoef: f32);
}
extern "C" {
    pub fn TCOD_color_gen_map(
        map: *mut TCOD_color_t,
        nb_key: ::std::os::raw::c_int,
        key_color: *const TCOD_color_t,
        key_index: *const ::std::os::raw::c_int,
    );
}
pub const TCOD_COLOR_RED: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_RED;
pub const TCOD_COLOR_FLAME: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_FLAME;
pub const TCOD_COLOR_ORANGE: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_ORANGE;
pub const TCOD_COLOR_AMBER: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_AMBER;
pub const TCOD_COLOR_YELLOW: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_YELLOW;
pub const TCOD_COLOR_LIME: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_LIME;
pub const TCOD_COLOR_CHARTREUSE: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_CHARTREUSE;
pub const TCOD_COLOR_GREEN: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_GREEN;
pub const TCOD_COLOR_SEA: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_SEA;
pub const TCOD_COLOR_TURQUOISE: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_TURQUOISE;
pub const TCOD_COLOR_CYAN: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_CYAN;
pub const TCOD_COLOR_SKY: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_SKY;
pub const TCOD_COLOR_AZURE: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_AZURE;
pub const TCOD_COLOR_BLUE: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_BLUE;
pub const TCOD_COLOR_HAN: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_HAN;
pub const TCOD_COLOR_VIOLET: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_VIOLET;
pub const TCOD_COLOR_PURPLE: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_PURPLE;
pub const TCOD_COLOR_FUCHSIA: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_FUCHSIA;
pub const TCOD_COLOR_MAGENTA: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_MAGENTA;
pub const TCOD_COLOR_PINK: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_PINK;
pub const TCOD_COLOR_CRIMSON: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_CRIMSON;
pub const TCOD_COLOR_NB: _bindgen_ty_10 = _bindgen_ty_10::TCOD_COLOR_NB;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_10 {
    TCOD_COLOR_RED = 0,
    TCOD_COLOR_FLAME = 1,
    TCOD_COLOR_ORANGE = 2,
    TCOD_COLOR_AMBER = 3,
    TCOD_COLOR_YELLOW = 4,
    TCOD_COLOR_LIME = 5,
    TCOD_COLOR_CHARTREUSE = 6,
    TCOD_COLOR_GREEN = 7,
    TCOD_COLOR_SEA = 8,
    TCOD_COLOR_TURQUOISE = 9,
    TCOD_COLOR_CYAN = 10,
    TCOD_COLOR_SKY = 11,
    TCOD_COLOR_AZURE = 12,
    TCOD_COLOR_BLUE = 13,
    TCOD_COLOR_HAN = 14,
    TCOD_COLOR_VIOLET = 15,
    TCOD_COLOR_PURPLE = 16,
    TCOD_COLOR_FUCHSIA = 17,
    TCOD_COLOR_MAGENTA = 18,
    TCOD_COLOR_PINK = 19,
    TCOD_COLOR_CRIMSON = 20,
    TCOD_COLOR_NB = 21,
}
pub const TCOD_COLOR_DESATURATED: _bindgen_ty_11 = _bindgen_ty_11::TCOD_COLOR_DESATURATED;
pub const TCOD_COLOR_LIGHTEST: _bindgen_ty_11 = _bindgen_ty_11::TCOD_COLOR_LIGHTEST;
pub const TCOD_COLOR_LIGHTER: _bindgen_ty_11 = _bindgen_ty_11::TCOD_COLOR_LIGHTER;
pub const TCOD_COLOR_LIGHT: _bindgen_ty_11 = _bindgen_ty_11::TCOD_COLOR_LIGHT;
pub const TCOD_COLOR_NORMAL: _bindgen_ty_11 = _bindgen_ty_11::TCOD_COLOR_NORMAL;
pub const TCOD_COLOR_DARK: _bindgen_ty_11 = _bindgen_ty_11::TCOD_COLOR_DARK;
pub const TCOD_COLOR_DARKER: _bindgen_ty_11 = _bindgen_ty_11::TCOD_COLOR_DARKER;
pub const TCOD_COLOR_DARKEST: _bindgen_ty_11 = _bindgen_ty_11::TCOD_COLOR_DARKEST;
pub const TCOD_COLOR_LEVELS: _bindgen_ty_11 = _bindgen_ty_11::TCOD_COLOR_LEVELS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_11 {
    TCOD_COLOR_DESATURATED = 0,
    TCOD_COLOR_LIGHTEST = 1,
    TCOD_COLOR_LIGHTER = 2,
    TCOD_COLOR_LIGHT = 3,
    TCOD_COLOR_NORMAL = 4,
    TCOD_COLOR_DARK = 5,
    TCOD_COLOR_DARKER = 6,
    TCOD_COLOR_DARKEST = 7,
    TCOD_COLOR_LEVELS = 8,
}
extern "C" {
    pub static mut TCOD_colors: [[TCOD_color_t; 8usize]; 21usize];
}
extern "C" {
    pub static TCOD_black: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_white: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_brass: TCOD_color_t;
}
extern "C" {
    pub static TCOD_copper: TCOD_color_t;
}
extern "C" {
    pub static TCOD_gold: TCOD_color_t;
}
extern "C" {
    pub static TCOD_silver: TCOD_color_t;
}
extern "C" {
    pub static TCOD_celadon: TCOD_color_t;
}
extern "C" {
    pub static TCOD_peach: TCOD_color_t;
}
pub type TCOD_console_t = *mut ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_keycode_t {
    TCODK_NONE = 0,
    TCODK_ESCAPE = 1,
    TCODK_BACKSPACE = 2,
    TCODK_TAB = 3,
    TCODK_ENTER = 4,
    TCODK_SHIFT = 5,
    TCODK_CONTROL = 6,
    TCODK_ALT = 7,
    TCODK_PAUSE = 8,
    TCODK_CAPSLOCK = 9,
    TCODK_PAGEUP = 10,
    TCODK_PAGEDOWN = 11,
    TCODK_END = 12,
    TCODK_HOME = 13,
    TCODK_UP = 14,
    TCODK_LEFT = 15,
    TCODK_RIGHT = 16,
    TCODK_DOWN = 17,
    TCODK_PRINTSCREEN = 18,
    TCODK_INSERT = 19,
    TCODK_DELETE = 20,
    TCODK_LWIN = 21,
    TCODK_RWIN = 22,
    TCODK_APPS = 23,
    TCODK_0 = 24,
    TCODK_1 = 25,
    TCODK_2 = 26,
    TCODK_3 = 27,
    TCODK_4 = 28,
    TCODK_5 = 29,
    TCODK_6 = 30,
    TCODK_7 = 31,
    TCODK_8 = 32,
    TCODK_9 = 33,
    TCODK_KP0 = 34,
    TCODK_KP1 = 35,
    TCODK_KP2 = 36,
    TCODK_KP3 = 37,
    TCODK_KP4 = 38,
    TCODK_KP5 = 39,
    TCODK_KP6 = 40,
    TCODK_KP7 = 41,
    TCODK_KP8 = 42,
    TCODK_KP9 = 43,
    TCODK_KPADD = 44,
    TCODK_KPSUB = 45,
    TCODK_KPDIV = 46,
    TCODK_KPMUL = 47,
    TCODK_KPDEC = 48,
    TCODK_KPENTER = 49,
    TCODK_F1 = 50,
    TCODK_F2 = 51,
    TCODK_F3 = 52,
    TCODK_F4 = 53,
    TCODK_F5 = 54,
    TCODK_F6 = 55,
    TCODK_F7 = 56,
    TCODK_F8 = 57,
    TCODK_F9 = 58,
    TCODK_F10 = 59,
    TCODK_F11 = 60,
    TCODK_F12 = 61,
    TCODK_NUMLOCK = 62,
    TCODK_SCROLLLOCK = 63,
    TCODK_SPACE = 64,
    TCODK_CHAR = 65,
    TCODK_TEXT = 66,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_key_t {
    pub vk: TCOD_keycode_t,
    pub c: ::std::os::raw::c_char,
    pub text: [::std::os::raw::c_char; 32usize],
    pub pressed: bool,
    pub lalt: bool,
    pub lctrl: bool,
    pub lmeta: bool,
    pub ralt: bool,
    pub rctrl: bool,
    pub rmeta: bool,
    pub shift: bool,
}
#[test]
fn bindgen_test_layout_TCOD_key_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_key_t>(),
        48usize,
        concat!("Size of: ", stringify!(TCOD_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_key_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).vk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(vk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).c as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).text as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).pressed as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(pressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).lalt as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(lalt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).lctrl as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(lctrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).lmeta as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(lmeta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).ralt as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(ralt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).rctrl as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(rctrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).rmeta as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(rmeta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).shift as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(shift)
        )
    );
}
impl Default for TCOD_key_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_chars_t {
    TCOD_CHAR_HLINE = 196,
    TCOD_CHAR_VLINE = 179,
    TCOD_CHAR_NE = 191,
    TCOD_CHAR_NW = 218,
    TCOD_CHAR_SE = 217,
    TCOD_CHAR_SW = 192,
    TCOD_CHAR_TEEW = 180,
    TCOD_CHAR_TEEE = 195,
    TCOD_CHAR_TEEN = 193,
    TCOD_CHAR_TEES = 194,
    TCOD_CHAR_CROSS = 197,
    TCOD_CHAR_DHLINE = 205,
    TCOD_CHAR_DVLINE = 186,
    TCOD_CHAR_DNE = 187,
    TCOD_CHAR_DNW = 201,
    TCOD_CHAR_DSE = 188,
    TCOD_CHAR_DSW = 200,
    TCOD_CHAR_DTEEW = 185,
    TCOD_CHAR_DTEEE = 204,
    TCOD_CHAR_DTEEN = 202,
    TCOD_CHAR_DTEES = 203,
    TCOD_CHAR_DCROSS = 206,
    TCOD_CHAR_BLOCK1 = 176,
    TCOD_CHAR_BLOCK2 = 177,
    TCOD_CHAR_BLOCK3 = 178,
    TCOD_CHAR_ARROW_N = 24,
    TCOD_CHAR_ARROW_S = 25,
    TCOD_CHAR_ARROW_E = 26,
    TCOD_CHAR_ARROW_W = 27,
    TCOD_CHAR_ARROW2_N = 30,
    TCOD_CHAR_ARROW2_S = 31,
    TCOD_CHAR_ARROW2_E = 16,
    TCOD_CHAR_ARROW2_W = 17,
    TCOD_CHAR_DARROW_H = 29,
    TCOD_CHAR_DARROW_V = 18,
    TCOD_CHAR_CHECKBOX_UNSET = 224,
    TCOD_CHAR_CHECKBOX_SET = 225,
    TCOD_CHAR_RADIO_UNSET = 9,
    TCOD_CHAR_RADIO_SET = 10,
    TCOD_CHAR_SUBP_NW = 226,
    TCOD_CHAR_SUBP_NE = 227,
    TCOD_CHAR_SUBP_N = 228,
    TCOD_CHAR_SUBP_SE = 229,
    TCOD_CHAR_SUBP_DIAG = 230,
    TCOD_CHAR_SUBP_E = 231,
    TCOD_CHAR_SUBP_SW = 232,
    TCOD_CHAR_SMILIE = 1,
    TCOD_CHAR_SMILIE_INV = 2,
    TCOD_CHAR_HEART = 3,
    TCOD_CHAR_DIAMOND = 4,
    TCOD_CHAR_CLUB = 5,
    TCOD_CHAR_SPADE = 6,
    TCOD_CHAR_BULLET = 7,
    TCOD_CHAR_BULLET_INV = 8,
    TCOD_CHAR_MALE = 11,
    TCOD_CHAR_FEMALE = 12,
    TCOD_CHAR_NOTE = 13,
    TCOD_CHAR_NOTE_DOUBLE = 14,
    TCOD_CHAR_LIGHT = 15,
    TCOD_CHAR_EXCLAM_DOUBLE = 19,
    TCOD_CHAR_PILCROW = 20,
    TCOD_CHAR_SECTION = 21,
    TCOD_CHAR_POUND = 156,
    TCOD_CHAR_MULTIPLICATION = 158,
    TCOD_CHAR_FUNCTION = 159,
    TCOD_CHAR_RESERVED = 169,
    TCOD_CHAR_HALF = 171,
    TCOD_CHAR_ONE_QUARTER = 172,
    TCOD_CHAR_COPYRIGHT = 184,
    TCOD_CHAR_CENT = 189,
    TCOD_CHAR_YEN = 190,
    TCOD_CHAR_CURRENCY = 207,
    TCOD_CHAR_THREE_QUARTERS = 243,
    TCOD_CHAR_DIVISION = 246,
    TCOD_CHAR_GRADE = 248,
    TCOD_CHAR_UMLAUT = 249,
    TCOD_CHAR_POW1 = 251,
    TCOD_CHAR_POW3 = 252,
    TCOD_CHAR_POW2 = 253,
    TCOD_CHAR_BULLET_SQUARE = 254,
}
impl TCOD_colctrl_t {
    pub const TCOD_COLCTRL_NUMBER: TCOD_colctrl_t = TCOD_colctrl_t::TCOD_COLCTRL_5;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_colctrl_t {
    TCOD_COLCTRL_1 = 1,
    TCOD_COLCTRL_2 = 2,
    TCOD_COLCTRL_3 = 3,
    TCOD_COLCTRL_4 = 4,
    TCOD_COLCTRL_5 = 5,
    TCOD_COLCTRL_FORE_RGB = 6,
    TCOD_COLCTRL_BACK_RGB = 7,
    TCOD_COLCTRL_STOP = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_bkgnd_flag_t {
    TCOD_BKGND_NONE = 0,
    TCOD_BKGND_SET = 1,
    TCOD_BKGND_MULTIPLY = 2,
    TCOD_BKGND_LIGHTEN = 3,
    TCOD_BKGND_DARKEN = 4,
    TCOD_BKGND_SCREEN = 5,
    TCOD_BKGND_COLOR_DODGE = 6,
    TCOD_BKGND_COLOR_BURN = 7,
    TCOD_BKGND_ADD = 8,
    TCOD_BKGND_ADDA = 9,
    TCOD_BKGND_BURN = 10,
    TCOD_BKGND_OVERLAY = 11,
    TCOD_BKGND_ALPH = 12,
    TCOD_BKGND_DEFAULT = 13,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_key_status_t {
    TCOD_KEY_PRESSED = 1,
    TCOD_KEY_RELEASED = 2,
}
impl TCOD_font_flags_t {
    pub const TCOD_FONT_TYPE_GRAYSCALE: TCOD_font_flags_t =
        TCOD_font_flags_t::TCOD_FONT_TYPE_GREYSCALE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_font_flags_t {
    TCOD_FONT_LAYOUT_ASCII_INCOL = 1,
    TCOD_FONT_LAYOUT_ASCII_INROW = 2,
    TCOD_FONT_TYPE_GREYSCALE = 4,
    TCOD_FONT_LAYOUT_TCOD = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_renderer_t {
    TCOD_RENDERER_GLSL = 0,
    TCOD_RENDERER_OPENGL = 1,
    TCOD_RENDERER_SDL = 2,
    TCOD_NB_RENDERERS = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_alignment_t {
    TCOD_LEFT = 0,
    TCOD_RIGHT = 1,
    TCOD_CENTER = 2,
}
pub type TCOD_image_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_image_new(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_image_from_console(console: TCOD_console_t) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_image_refresh_console(image: TCOD_image_t, console: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_image_load(filename: *const ::std::os::raw::c_char) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_image_clear(image: TCOD_image_t, color: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_image_invert(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_hflip(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_rotate90(image: TCOD_image_t, numRotations: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_image_vflip(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_scale(
        image: TCOD_image_t,
        neww: ::std::os::raw::c_int,
        newh: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_image_save(image: TCOD_image_t, filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_image_get_size(
        image: TCOD_image_t,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_image_get_pixel(
        image: TCOD_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_image_get_alpha(
        image: TCOD_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_image_get_mipmap_pixel(
        image: TCOD_image_t,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
    ) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_image_put_pixel(
        image: TCOD_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        col: TCOD_color_t,
    );
}
extern "C" {
    pub fn TCOD_image_blit(
        image: TCOD_image_t,
        console: TCOD_console_t,
        x: f32,
        y: f32,
        bkgnd_flag: TCOD_bkgnd_flag_t,
        scalex: f32,
        scaley: f32,
        angle: f32,
    );
}
extern "C" {
    pub fn TCOD_image_blit_rect(
        image: TCOD_image_t,
        console: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        bkgnd_flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    pub fn TCOD_image_blit_2x(
        image: TCOD_image_t,
        dest: TCOD_console_t,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        sx: ::std::os::raw::c_int,
        sy: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_image_delete(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_set_key_color(image: TCOD_image_t, key_color: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_image_is_pixel_transparent(
        image: TCOD_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
pub type TCOD_list_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_list_new() -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_allocate(nb_elements: ::std::os::raw::c_int) -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_duplicate(l: TCOD_list_t) -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_delete(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_push(l: TCOD_list_t, elt: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn TCOD_list_pop(l: TCOD_list_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_peek(l: TCOD_list_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_add_all(l: TCOD_list_t, l2: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_get(l: TCOD_list_t, idx: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_set(
        l: TCOD_list_t,
        elt: *const ::std::os::raw::c_void,
        idx: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_list_begin(l: TCOD_list_t) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_end(l: TCOD_list_t) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_reverse(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_remove_iterator(
        l: TCOD_list_t,
        elt: *mut *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_remove(l: TCOD_list_t, elt: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn TCOD_list_remove_iterator_fast(
        l: TCOD_list_t,
        elt: *mut *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_remove_fast(l: TCOD_list_t, elt: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn TCOD_list_contains(l: TCOD_list_t, elt: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn TCOD_list_clear(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_clear_and_delete(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_size(l: TCOD_list_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_list_insert_before(
        l: TCOD_list_t,
        elt: *const ::std::os::raw::c_void,
        before: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_is_empty(l: TCOD_list_t) -> bool;
}
extern "C" {
    pub fn TCOD_console_init_root(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        fullscreen: bool,
        renderer: TCOD_renderer_t,
    );
}
extern "C" {
    pub fn TCOD_console_set_window_title(title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_console_set_fullscreen(fullscreen: bool);
}
extern "C" {
    pub fn TCOD_console_is_fullscreen() -> bool;
}
extern "C" {
    pub fn TCOD_console_is_window_closed() -> bool;
}
extern "C" {
    pub fn TCOD_console_has_mouse_focus() -> bool;
}
extern "C" {
    pub fn TCOD_console_is_active() -> bool;
}
extern "C" {
    pub fn TCOD_console_set_custom_font(
        fontFile: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        nb_char_horiz: ::std::os::raw::c_int,
        nb_char_vertic: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_map_ascii_code_to_font(
        asciiCode: ::std::os::raw::c_int,
        fontCharX: ::std::os::raw::c_int,
        fontCharY: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_map_ascii_codes_to_font(
        asciiCode: ::std::os::raw::c_int,
        nbCodes: ::std::os::raw::c_int,
        fontCharX: ::std::os::raw::c_int,
        fontCharY: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_map_string_to_font(
        s: *const ::std::os::raw::c_char,
        fontCharX: ::std::os::raw::c_int,
        fontCharY: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_set_dirty(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_set_default_background(con: TCOD_console_t, col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_set_default_foreground(con: TCOD_console_t, col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_clear(con: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_console_set_char_background(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        col: TCOD_color_t,
        flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    pub fn TCOD_console_set_char_foreground(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        col: TCOD_color_t,
    );
}
extern "C" {
    pub fn TCOD_console_set_char(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_put_char(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    pub fn TCOD_console_put_char_ex(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        fore: TCOD_color_t,
        back: TCOD_color_t,
    );
}
extern "C" {
    pub fn TCOD_console_set_background_flag(con: TCOD_console_t, flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_get_background_flag(con: TCOD_console_t) -> TCOD_bkgnd_flag_t;
}
extern "C" {
    pub fn TCOD_console_set_alignment(con: TCOD_console_t, alignment: TCOD_alignment_t);
}
extern "C" {
    pub fn TCOD_console_get_alignment(con: TCOD_console_t) -> TCOD_alignment_t;
}
extern "C" {
    pub fn TCOD_console_print(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn TCOD_console_print_ex(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn TCOD_console_print_rect(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_print_rect_ex(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height_rect(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_rect(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        clear: bool,
        flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    pub fn TCOD_console_hline(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    pub fn TCOD_console_vline(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    pub fn TCOD_console_print_frame(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        empty: bool,
        flag: TCOD_bkgnd_flag_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn TCOD_console_map_string_to_font_utf(
        s: *const wchar_t,
        fontCharX: ::std::os::raw::c_int,
        fontCharY: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_print_utf(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fmt: *const wchar_t,
        ...
    );
}
extern "C" {
    pub fn TCOD_console_print_ex_utf(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
        fmt: *const wchar_t,
        ...
    );
}
extern "C" {
    pub fn TCOD_console_print_rect_utf(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        fmt: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_print_rect_ex_utf(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
        fmt: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height_rect_utf(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        fmt: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_default_background(con: TCOD_console_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_default_foreground(con: TCOD_console_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_char_background(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_char_foreground(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_char(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_background_color_image(con: TCOD_console_t) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_console_get_foreground_color_image(con: TCOD_console_t) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_console_set_fade(val: u8, fade: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_get_fade() -> u8;
}
extern "C" {
    pub fn TCOD_console_get_fading_color() -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_flush();
}
extern "C" {
    pub fn TCOD_console_set_color_control(
        con: TCOD_colctrl_t,
        fore: TCOD_color_t,
        back: TCOD_color_t,
    );
}
extern "C" {
    pub fn TCOD_console_check_for_keypress(flags: ::std::os::raw::c_int) -> TCOD_key_t;
}
extern "C" {
    pub fn TCOD_console_wait_for_keypress(flush: bool) -> TCOD_key_t;
}
extern "C" {
    pub fn TCOD_console_is_key_pressed(key: TCOD_keycode_t) -> bool;
}
extern "C" {
    pub fn TCOD_console_from_file(filename: *const ::std::os::raw::c_char) -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_console_load_asc(
        con: TCOD_console_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_load_apf(
        con: TCOD_console_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_save_asc(
        con: TCOD_console_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_save_apf(
        con: TCOD_console_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_new(w: ::std::os::raw::c_int, h: ::std::os::raw::c_int) -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_console_get_width(con: TCOD_console_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height(con: TCOD_console_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_set_key_color(con: TCOD_console_t, col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_blit(
        src: TCOD_console_t,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        wSrc: ::std::os::raw::c_int,
        hSrc: ::std::os::raw::c_int,
        dst: TCOD_console_t,
        xDst: ::std::os::raw::c_int,
        yDst: ::std::os::raw::c_int,
        foreground_alpha: f32,
        background_alpha: f32,
    );
}
extern "C" {
    pub fn TCOD_console_delete(console: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_console_credits();
}
extern "C" {
    pub fn TCOD_console_credits_reset();
}
extern "C" {
    pub fn TCOD_console_credits_render(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        alpha: bool,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_from_xp(filename: *const ::std::os::raw::c_char) -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_console_load_xp(
        con: TCOD_console_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_save_xp(
        con: TCOD_console_t,
        filename: *const ::std::os::raw::c_char,
        compress_level: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_list_from_xp(filename: *const ::std::os::raw::c_char) -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_console_list_save_xp(
        console_list: TCOD_list_t,
        filename: *const ::std::os::raw::c_char,
        compress_level: ::std::os::raw::c_int,
    ) -> bool;
}
pub type TCOD_map_t = *mut ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_fov_algorithm_t {
    FOV_BASIC = 0,
    FOV_DIAMOND = 1,
    FOV_SHADOW = 2,
    FOV_PERMISSIVE_0 = 3,
    FOV_PERMISSIVE_1 = 4,
    FOV_PERMISSIVE_2 = 5,
    FOV_PERMISSIVE_3 = 6,
    FOV_PERMISSIVE_4 = 7,
    FOV_PERMISSIVE_5 = 8,
    FOV_PERMISSIVE_6 = 9,
    FOV_PERMISSIVE_7 = 10,
    FOV_PERMISSIVE_8 = 11,
    FOV_RESTRICTIVE = 12,
    NB_FOV_ALGORITHMS = 13,
}
extern "C" {
    pub fn TCOD_map_new(width: ::std::os::raw::c_int, height: ::std::os::raw::c_int) -> TCOD_map_t;
}
extern "C" {
    pub fn TCOD_map_clear(map: TCOD_map_t, transparent: bool, walkable: bool);
}
extern "C" {
    pub fn TCOD_map_copy(source: TCOD_map_t, dest: TCOD_map_t);
}
extern "C" {
    pub fn TCOD_map_set_properties(
        map: TCOD_map_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        is_transparent: bool,
        is_walkable: bool,
    );
}
extern "C" {
    pub fn TCOD_map_delete(map: TCOD_map_t);
}
extern "C" {
    pub fn TCOD_map_compute_fov(
        map: TCOD_map_t,
        player_x: ::std::os::raw::c_int,
        player_y: ::std::os::raw::c_int,
        max_radius: ::std::os::raw::c_int,
        light_walls: bool,
        algo: TCOD_fov_algorithm_t,
    );
}
extern "C" {
    pub fn TCOD_map_is_in_fov(
        map: TCOD_map_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_map_set_in_fov(
        map: TCOD_map_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fov: bool,
    );
}
extern "C" {
    pub fn TCOD_map_is_transparent(
        map: TCOD_map_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_map_is_walkable(
        map: TCOD_map_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_map_get_width(map: TCOD_map_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_map_get_height(map: TCOD_map_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_map_get_nb_cells(map: TCOD_map_t) -> ::std::os::raw::c_int;
}
pub type TCOD_noise_t = *mut ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_noise_type_t {
    TCOD_NOISE_PERLIN = 1,
    TCOD_NOISE_SIMPLEX = 2,
    TCOD_NOISE_WAVELET = 4,
    TCOD_NOISE_DEFAULT = 0,
}
extern "C" {
    pub fn TCOD_noise_new(
        dimensions: ::std::os::raw::c_int,
        hurst: f32,
        lacunarity: f32,
        random: TCOD_random_t,
    ) -> TCOD_noise_t;
}
extern "C" {
    pub fn TCOD_noise_set_type(noise: TCOD_noise_t, type_: TCOD_noise_type_t);
}
extern "C" {
    pub fn TCOD_noise_get_ex(noise: TCOD_noise_t, f: *mut f32, type_: TCOD_noise_type_t) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_fbm_ex(
        noise: TCOD_noise_t,
        f: *mut f32,
        octaves: f32,
        type_: TCOD_noise_type_t,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_turbulence_ex(
        noise: TCOD_noise_t,
        f: *mut f32,
        octaves: f32,
        type_: TCOD_noise_type_t,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get(noise: TCOD_noise_t, f: *mut f32) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_fbm(noise: TCOD_noise_t, f: *mut f32, octaves: f32) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_turbulence(noise: TCOD_noise_t, f: *mut f32, octaves: f32) -> f32;
}
extern "C" {
    pub fn TCOD_noise_delete(noise: TCOD_noise_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_heightmap_t {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub values: *mut f32,
}
#[test]
fn bindgen_test_layout_TCOD_heightmap_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_heightmap_t>(),
        16usize,
        concat!("Size of: ", stringify!(TCOD_heightmap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_heightmap_t>(),
        8usize,
        concat!("Alignment of ", stringify!(TCOD_heightmap_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_heightmap_t>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_heightmap_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_heightmap_t>())).h as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_heightmap_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_heightmap_t>())).values as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_heightmap_t),
            "::",
            stringify!(values)
        )
    );
}
impl Default for TCOD_heightmap_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn TCOD_heightmap_new(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut TCOD_heightmap_t;
}
extern "C" {
    pub fn TCOD_heightmap_delete(hm: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_get_value(
        hm: *const TCOD_heightmap_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_get_interpolated_value(
        hm: *const TCOD_heightmap_t,
        x: f32,
        y: f32,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_set_value(
        hm: *mut TCOD_heightmap_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        value: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_get_slope(
        hm: *const TCOD_heightmap_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_get_normal(
        hm: *const TCOD_heightmap_t,
        x: f32,
        y: f32,
        n: *mut f32,
        waterLevel: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_count_cells(
        hm: *const TCOD_heightmap_t,
        min: f32,
        max: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_heightmap_has_land_on_border(hm: *const TCOD_heightmap_t, waterLevel: f32) -> bool;
}
extern "C" {
    pub fn TCOD_heightmap_get_minmax(hm: *const TCOD_heightmap_t, min: *mut f32, max: *mut f32);
}
extern "C" {
    pub fn TCOD_heightmap_copy(hm_source: *const TCOD_heightmap_t, hm_dest: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_add(hm: *mut TCOD_heightmap_t, value: f32);
}
extern "C" {
    pub fn TCOD_heightmap_scale(hm: *mut TCOD_heightmap_t, value: f32);
}
extern "C" {
    pub fn TCOD_heightmap_clamp(hm: *mut TCOD_heightmap_t, min: f32, max: f32);
}
extern "C" {
    pub fn TCOD_heightmap_normalize(hm: *mut TCOD_heightmap_t, min: f32, max: f32);
}
extern "C" {
    pub fn TCOD_heightmap_clear(hm: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_lerp_hm(
        hm1: *const TCOD_heightmap_t,
        hm2: *const TCOD_heightmap_t,
        hmres: *mut TCOD_heightmap_t,
        coef: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_add_hm(
        hm1: *const TCOD_heightmap_t,
        hm2: *const TCOD_heightmap_t,
        hmres: *mut TCOD_heightmap_t,
    );
}
extern "C" {
    pub fn TCOD_heightmap_multiply_hm(
        hm1: *const TCOD_heightmap_t,
        hm2: *const TCOD_heightmap_t,
        hmres: *mut TCOD_heightmap_t,
    );
}
extern "C" {
    pub fn TCOD_heightmap_add_hill(
        hm: *mut TCOD_heightmap_t,
        hx: f32,
        hy: f32,
        hradius: f32,
        hheight: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_dig_hill(
        hm: *mut TCOD_heightmap_t,
        hx: f32,
        hy: f32,
        hradius: f32,
        hheight: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_dig_bezier(
        hm: *mut TCOD_heightmap_t,
        px: *mut ::std::os::raw::c_int,
        py: *mut ::std::os::raw::c_int,
        startRadius: f32,
        startDepth: f32,
        endRadius: f32,
        endDepth: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_rain_erosion(
        hm: *mut TCOD_heightmap_t,
        nbDrops: ::std::os::raw::c_int,
        erosionCoef: f32,
        sedimentationCoef: f32,
        rnd: TCOD_random_t,
    );
}
extern "C" {
    pub fn TCOD_heightmap_kernel_transform(
        hm: *mut TCOD_heightmap_t,
        kernelsize: ::std::os::raw::c_int,
        dx: *const ::std::os::raw::c_int,
        dy: *const ::std::os::raw::c_int,
        weight: *const f32,
        minLevel: f32,
        maxLevel: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_add_voronoi(
        hm: *mut TCOD_heightmap_t,
        nbPoints: ::std::os::raw::c_int,
        nbCoef: ::std::os::raw::c_int,
        coef: *const f32,
        rnd: TCOD_random_t,
    );
}
extern "C" {
    pub fn TCOD_heightmap_mid_point_displacement(
        hm: *mut TCOD_heightmap_t,
        rnd: TCOD_random_t,
        roughness: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_add_fbm(
        hm: *mut TCOD_heightmap_t,
        noise: TCOD_noise_t,
        mulx: f32,
        muly: f32,
        addx: f32,
        addy: f32,
        octaves: f32,
        delta: f32,
        scale: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_scale_fbm(
        hm: *mut TCOD_heightmap_t,
        noise: TCOD_noise_t,
        mulx: f32,
        muly: f32,
        addx: f32,
        addy: f32,
        octaves: f32,
        delta: f32,
        scale: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_islandify(hm: *mut TCOD_heightmap_t, seaLevel: f32, rnd: TCOD_random_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TCOD_lex_t {
    pub file_line: ::std::os::raw::c_int,
    pub token_type: ::std::os::raw::c_int,
    pub token_int_val: ::std::os::raw::c_int,
    pub token_idx: ::std::os::raw::c_int,
    pub token_float_val: f32,
    pub tok: *mut ::std::os::raw::c_char,
    pub toklen: ::std::os::raw::c_int,
    pub lastStringDelim: ::std::os::raw::c_char,
    pub pos: *mut ::std::os::raw::c_char,
    pub buf: *mut ::std::os::raw::c_char,
    pub filename: *mut ::std::os::raw::c_char,
    pub last_javadoc_comment: *mut ::std::os::raw::c_char,
    pub nb_symbols: ::std::os::raw::c_int,
    pub nb_keywords: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub symbols: [[::std::os::raw::c_char; 5usize]; 100usize],
    pub keywords: [[::std::os::raw::c_char; 20usize]; 100usize],
    pub simpleCmt: *const ::std::os::raw::c_char,
    pub cmtStart: *const ::std::os::raw::c_char,
    pub cmtStop: *const ::std::os::raw::c_char,
    pub javadocCmtStart: *const ::std::os::raw::c_char,
    pub stringDelim: *const ::std::os::raw::c_char,
    pub javadoc_read: bool,
    pub allocBuf: bool,
    pub savept: bool,
}
#[test]
fn bindgen_test_layout_TCOD_lex_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_lex_t>(),
        2632usize,
        concat!("Size of: ", stringify!(TCOD_lex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_lex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(TCOD_lex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).file_line as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(file_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).token_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(token_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).token_int_val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(token_int_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).token_idx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(token_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).token_float_val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(token_float_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).tok as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(tok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).toklen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(toklen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).lastStringDelim as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(lastStringDelim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).pos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).buf as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).filename as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).last_javadoc_comment as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(last_javadoc_comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).nb_symbols as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(nb_symbols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).nb_keywords as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(nb_keywords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).flags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).symbols as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(symbols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).keywords as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(keywords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).simpleCmt as *const _ as usize },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(simpleCmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).cmtStart as *const _ as usize },
        2592usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(cmtStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).cmtStop as *const _ as usize },
        2600usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(cmtStop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).javadocCmtStart as *const _ as usize },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(javadocCmtStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).stringDelim as *const _ as usize },
        2616usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(stringDelim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).javadoc_read as *const _ as usize },
        2624usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(javadoc_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).allocBuf as *const _ as usize },
        2625usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(allocBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).savept as *const _ as usize },
        2626usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(savept)
        )
    );
}
impl Default for TCOD_lex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn TCOD_lex_new_intern() -> *mut TCOD_lex_t;
}
extern "C" {
    pub fn TCOD_lex_new(
        symbols: *mut *const ::std::os::raw::c_char,
        keywords: *mut *const ::std::os::raw::c_char,
        simpleComment: *const ::std::os::raw::c_char,
        commentStart: *const ::std::os::raw::c_char,
        commentStop: *const ::std::os::raw::c_char,
        javadocCommentStart: *const ::std::os::raw::c_char,
        stringDelim: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut TCOD_lex_t;
}
extern "C" {
    pub fn TCOD_lex_delete(lex: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_set_data_buffer(lex: *mut TCOD_lex_t, dat: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_lex_set_data_file(
        lex: *mut TCOD_lex_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_lex_parse(lex: *mut TCOD_lex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_lex_parse_until_token_type(
        lex: *mut TCOD_lex_t,
        token_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_lex_parse_until_token_value(
        lex: *mut TCOD_lex_t,
        token_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_lex_expect_token_type(
        lex: *mut TCOD_lex_t,
        token_type: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_lex_expect_token_value(
        lex: *mut TCOD_lex_t,
        token_type: ::std::os::raw::c_int,
        token_value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_lex_savepoint(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_restore(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_get_last_javadoc(lex: *mut TCOD_lex_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_lex_get_token_name(
        token_type: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_lex_get_last_error() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_lex_hextoint(c: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_random_get_instance() -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_new(algo: TCOD_random_algo_t) -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_save(mersenne: TCOD_random_t) -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_restore(mersenne: TCOD_random_t, backup: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_random_new_from_seed(algo: TCOD_random_algo_t, seed: u32) -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_delete(mersenne: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_random_set_distribution(mersenne: TCOD_random_t, distribution: TCOD_distribution_t);
}
extern "C" {
    pub fn TCOD_random_get_int(
        mersenne: TCOD_random_t,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_random_get_float(mersenne: TCOD_random_t, min: f32, max: f32) -> f32;
}
extern "C" {
    pub fn TCOD_random_get_double(mersenne: TCOD_random_t, min: f64, max: f64) -> f64;
}
extern "C" {
    pub fn TCOD_random_get_int_mean(
        mersenne: TCOD_random_t,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
        mean: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_random_get_float_mean(
        mersenne: TCOD_random_t,
        min: f32,
        max: f32,
        mean: f32,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_random_get_double_mean(
        mersenne: TCOD_random_t,
        min: f64,
        max: f64,
        mean: f64,
    ) -> f64;
}
extern "C" {
    pub fn TCOD_random_dice_new(s: *const ::std::os::raw::c_char) -> TCOD_dice_t;
}
extern "C" {
    pub fn TCOD_random_dice_roll(
        mersenne: TCOD_random_t,
        dice: TCOD_dice_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_random_dice_roll_s(
        mersenne: TCOD_random_t,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_mouse_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub dx: ::std::os::raw::c_int,
    pub dy: ::std::os::raw::c_int,
    pub cx: ::std::os::raw::c_int,
    pub cy: ::std::os::raw::c_int,
    pub dcx: ::std::os::raw::c_int,
    pub dcy: ::std::os::raw::c_int,
    pub lbutton: bool,
    pub rbutton: bool,
    pub mbutton: bool,
    pub lbutton_pressed: bool,
    pub rbutton_pressed: bool,
    pub mbutton_pressed: bool,
    pub wheel_up: bool,
    pub wheel_down: bool,
}
#[test]
fn bindgen_test_layout_TCOD_mouse_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_mouse_t>(),
        40usize,
        concat!("Size of: ", stringify!(TCOD_mouse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_mouse_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_mouse_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).dx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(dx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).dy as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(dy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).cx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).cy as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(cy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).dcx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(dcx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).dcy as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(dcy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).lbutton as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(lbutton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).rbutton as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(rbutton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).mbutton as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(mbutton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).lbutton_pressed as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(lbutton_pressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).rbutton_pressed as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(rbutton_pressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).mbutton_pressed as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(mbutton_pressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).wheel_up as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(wheel_up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).wheel_down as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(wheel_down)
        )
    );
}
extern "C" {
    pub fn TCOD_mouse_show_cursor(visible: bool);
}
extern "C" {
    pub fn TCOD_mouse_get_status() -> TCOD_mouse_t;
}
extern "C" {
    pub fn TCOD_mouse_is_cursor_visible() -> bool;
}
extern "C" {
    pub fn TCOD_mouse_move(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_mouse_includes_touch(enable: bool);
}
pub type TCOD_namegen_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_namegen_parse(filename: *const ::std::os::raw::c_char, random: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_namegen_generate(
        name: *mut ::std::os::raw::c_char,
        allocate: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_namegen_generate_custom(
        name: *mut ::std::os::raw::c_char,
        rule: *mut ::std::os::raw::c_char,
        allocate: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_namegen_get_sets() -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_namegen_destroy();
}
pub type TCOD_path_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        xFrom: ::std::os::raw::c_int,
        yFrom: ::std::os::raw::c_int,
        xTo: ::std::os::raw::c_int,
        yTo: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ) -> f32,
>;
pub type TCOD_path_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_path_new_using_map(map: TCOD_map_t, diagonalCost: f32) -> TCOD_path_t;
}
extern "C" {
    pub fn TCOD_path_new_using_function(
        map_width: ::std::os::raw::c_int,
        map_height: ::std::os::raw::c_int,
        func: TCOD_path_func_t,
        user_data: *mut ::std::os::raw::c_void,
        diagonalCost: f32,
    ) -> TCOD_path_t;
}
extern "C" {
    pub fn TCOD_path_compute(
        path: TCOD_path_t,
        ox: ::std::os::raw::c_int,
        oy: ::std::os::raw::c_int,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_path_walk(
        path: TCOD_path_t,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        recalculate_when_needed: bool,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_path_is_empty(path: TCOD_path_t) -> bool;
}
extern "C" {
    pub fn TCOD_path_size(path: TCOD_path_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_path_reverse(path: TCOD_path_t);
}
extern "C" {
    pub fn TCOD_path_get(
        path: TCOD_path_t,
        index: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_path_get_origin(
        path: TCOD_path_t,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_path_get_destination(
        path: TCOD_path_t,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_path_delete(path: TCOD_path_t);
}
pub type TCOD_dijkstra_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_dijkstra_new(map: TCOD_map_t, diagonalCost: f32) -> TCOD_dijkstra_t;
}
extern "C" {
    pub fn TCOD_dijkstra_new_using_function(
        map_width: ::std::os::raw::c_int,
        map_height: ::std::os::raw::c_int,
        func: TCOD_path_func_t,
        user_data: *mut ::std::os::raw::c_void,
        diagonalCost: f32,
    ) -> TCOD_dijkstra_t;
}
extern "C" {
    pub fn TCOD_dijkstra_compute(
        dijkstra: TCOD_dijkstra_t,
        root_x: ::std::os::raw::c_int,
        root_y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_dijkstra_get_distance(
        dijkstra: TCOD_dijkstra_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_dijkstra_path_set(
        dijkstra: TCOD_dijkstra_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_dijkstra_is_empty(path: TCOD_dijkstra_t) -> bool;
}
extern "C" {
    pub fn TCOD_dijkstra_size(path: TCOD_dijkstra_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_dijkstra_reverse(path: TCOD_dijkstra_t);
}
extern "C" {
    pub fn TCOD_dijkstra_get(
        path: TCOD_dijkstra_t,
        index: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_dijkstra_path_walk(
        dijkstra: TCOD_dijkstra_t,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_dijkstra_delete(dijkstra: TCOD_dijkstra_t);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_value_type_t {
    TCOD_TYPE_NONE = 0,
    TCOD_TYPE_BOOL = 1,
    TCOD_TYPE_CHAR = 2,
    TCOD_TYPE_INT = 3,
    TCOD_TYPE_FLOAT = 4,
    TCOD_TYPE_STRING = 5,
    TCOD_TYPE_COLOR = 6,
    TCOD_TYPE_DICE = 7,
    TCOD_TYPE_VALUELIST00 = 8,
    TCOD_TYPE_VALUELIST01 = 9,
    TCOD_TYPE_VALUELIST02 = 10,
    TCOD_TYPE_VALUELIST03 = 11,
    TCOD_TYPE_VALUELIST04 = 12,
    TCOD_TYPE_VALUELIST05 = 13,
    TCOD_TYPE_VALUELIST06 = 14,
    TCOD_TYPE_VALUELIST07 = 15,
    TCOD_TYPE_VALUELIST08 = 16,
    TCOD_TYPE_VALUELIST09 = 17,
    TCOD_TYPE_VALUELIST10 = 18,
    TCOD_TYPE_VALUELIST11 = 19,
    TCOD_TYPE_VALUELIST12 = 20,
    TCOD_TYPE_VALUELIST13 = 21,
    TCOD_TYPE_VALUELIST14 = 22,
    TCOD_TYPE_VALUELIST15 = 23,
    TCOD_TYPE_CUSTOM00 = 24,
    TCOD_TYPE_CUSTOM01 = 25,
    TCOD_TYPE_CUSTOM02 = 26,
    TCOD_TYPE_CUSTOM03 = 27,
    TCOD_TYPE_CUSTOM04 = 28,
    TCOD_TYPE_CUSTOM05 = 29,
    TCOD_TYPE_CUSTOM06 = 30,
    TCOD_TYPE_CUSTOM07 = 31,
    TCOD_TYPE_CUSTOM08 = 32,
    TCOD_TYPE_CUSTOM09 = 33,
    TCOD_TYPE_CUSTOM10 = 34,
    TCOD_TYPE_CUSTOM11 = 35,
    TCOD_TYPE_CUSTOM12 = 36,
    TCOD_TYPE_CUSTOM13 = 37,
    TCOD_TYPE_CUSTOM14 = 38,
    TCOD_TYPE_CUSTOM15 = 39,
    TCOD_TYPE_LIST = 1024,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TCOD_value_t {
    pub b: bool,
    pub c: ::std::os::raw::c_char,
    pub i: i32,
    pub f: f32,
    pub s: *mut ::std::os::raw::c_char,
    pub col: TCOD_color_t,
    pub dice: TCOD_dice_t,
    pub list: TCOD_list_t,
    pub custom: *mut ::std::os::raw::c_void,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_TCOD_value_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_value_t>(),
        16usize,
        concat!("Size of: ", stringify!(TCOD_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(TCOD_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).col as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).dice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(dice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).custom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(custom)
        )
    );
}
impl Default for TCOD_value_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_parser_struct_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_struct_get_name(def: TCOD_parser_struct_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_struct_add_property(
        def: TCOD_parser_struct_t,
        name: *const ::std::os::raw::c_char,
        type_: TCOD_value_type_t,
        mandatory: bool,
    );
}
extern "C" {
    pub fn TCOD_struct_add_list_property(
        def: TCOD_parser_struct_t,
        name: *const ::std::os::raw::c_char,
        type_: TCOD_value_type_t,
        mandatory: bool,
    );
}
extern "C" {
    pub fn TCOD_struct_add_value_list(
        def: TCOD_parser_struct_t,
        name: *const ::std::os::raw::c_char,
        value_list: *mut *const ::std::os::raw::c_char,
        mandatory: bool,
    );
}
extern "C" {
    pub fn TCOD_struct_add_value_list_sized(
        def: TCOD_parser_struct_t,
        name: *const ::std::os::raw::c_char,
        value_list: *mut *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        mandatory: bool,
    );
}
extern "C" {
    pub fn TCOD_struct_add_flag(def: TCOD_parser_struct_t, propname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_struct_add_structure(
        def: TCOD_parser_struct_t,
        sub_structure: TCOD_parser_struct_t,
    );
}
extern "C" {
    pub fn TCOD_struct_is_mandatory(
        def: TCOD_parser_struct_t,
        propname: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_struct_get_type(
        def: TCOD_parser_struct_t,
        propname: *const ::std::os::raw::c_char,
    ) -> TCOD_value_type_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_parser_listener_t {
    pub new_struct: ::std::option::Option<
        unsafe extern "C" fn(
            str: TCOD_parser_struct_t,
            name: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub new_flag:
        ::std::option::Option<unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> bool>,
    pub new_property: ::std::option::Option<
        unsafe extern "C" fn(
            propname: *const ::std::os::raw::c_char,
            type_: TCOD_value_type_t,
            value: TCOD_value_t,
        ) -> bool,
    >,
    pub end_struct: ::std::option::Option<
        unsafe extern "C" fn(
            str: TCOD_parser_struct_t,
            name: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub error: ::std::option::Option<unsafe extern "C" fn(msg: *const ::std::os::raw::c_char)>,
}
#[test]
fn bindgen_test_layout_TCOD_parser_listener_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_parser_listener_t>(),
        40usize,
        concat!("Size of: ", stringify!(TCOD_parser_listener_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_parser_listener_t>(),
        8usize,
        concat!("Alignment of ", stringify!(TCOD_parser_listener_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_parser_listener_t>())).new_struct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_listener_t),
            "::",
            stringify!(new_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_parser_listener_t>())).new_flag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_listener_t),
            "::",
            stringify!(new_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_parser_listener_t>())).new_property as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_listener_t),
            "::",
            stringify!(new_property)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_parser_listener_t>())).end_struct as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_listener_t),
            "::",
            stringify!(end_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_parser_listener_t>())).error as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_listener_t),
            "::",
            stringify!(error)
        )
    );
}
pub type TCOD_parser_custom_t = ::std::option::Option<
    unsafe extern "C" fn(
        lex: *mut TCOD_lex_t,
        listener: *mut TCOD_parser_listener_t,
        str: TCOD_parser_struct_t,
        propname: *mut ::std::os::raw::c_char,
    ) -> TCOD_value_t,
>;
pub type TCOD_parser_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_parser_new() -> TCOD_parser_t;
}
extern "C" {
    pub fn TCOD_parser_new_struct(
        parser: TCOD_parser_t,
        name: *mut ::std::os::raw::c_char,
    ) -> TCOD_parser_struct_t;
}
extern "C" {
    pub fn TCOD_parser_new_custom_type(
        parser: TCOD_parser_t,
        custom_type_parser: TCOD_parser_custom_t,
    ) -> TCOD_value_type_t;
}
extern "C" {
    pub fn TCOD_parser_run(
        parser: TCOD_parser_t,
        filename: *const ::std::os::raw::c_char,
        listener: *mut TCOD_parser_listener_t,
    );
}
extern "C" {
    pub fn TCOD_parser_delete(parser: TCOD_parser_t);
}
extern "C" {
    pub fn TCOD_parser_error(msg: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn TCOD_parser_has_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_parser_get_bool_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_parser_get_char_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_parser_get_int_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_parser_get_float_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_parser_get_string_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_parser_get_color_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_parser_get_dice_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> TCOD_dice_t;
}
extern "C" {
    pub fn TCOD_parser_get_dice_property_py(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
        dice: *mut TCOD_dice_t,
    );
}
extern "C" {
    pub fn TCOD_parser_get_custom_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_parser_get_list_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
        type_: TCOD_value_type_t,
    ) -> TCOD_list_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_struct_int_t {
    pub name: *mut ::std::os::raw::c_char,
    pub flags: TCOD_list_t,
    pub props: TCOD_list_t,
    pub lists: TCOD_list_t,
    pub structs: TCOD_list_t,
}
#[test]
fn bindgen_test_layout_TCOD_struct_int_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_struct_int_t>(),
        40usize,
        concat!("Size of: ", stringify!(TCOD_struct_int_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_struct_int_t>(),
        8usize,
        concat!("Alignment of ", stringify!(TCOD_struct_int_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_struct_int_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_struct_int_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_struct_int_t>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_struct_int_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_struct_int_t>())).props as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_struct_int_t),
            "::",
            stringify!(props)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_struct_int_t>())).lists as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_struct_int_t),
            "::",
            stringify!(lists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_struct_int_t>())).structs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_struct_int_t),
            "::",
            stringify!(structs)
        )
    );
}
impl Default for TCOD_struct_int_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_parser_int_t {
    pub structs: TCOD_list_t,
    pub customs: [TCOD_parser_custom_t; 16usize],
    pub fatal: bool,
    pub props: TCOD_list_t,
}
#[test]
fn bindgen_test_layout_TCOD_parser_int_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_parser_int_t>(),
        152usize,
        concat!("Size of: ", stringify!(TCOD_parser_int_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_parser_int_t>(),
        8usize,
        concat!("Alignment of ", stringify!(TCOD_parser_int_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_parser_int_t>())).structs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_int_t),
            "::",
            stringify!(structs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_parser_int_t>())).customs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_int_t),
            "::",
            stringify!(customs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_parser_int_t>())).fatal as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_int_t),
            "::",
            stringify!(fatal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_parser_int_t>())).props as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_int_t),
            "::",
            stringify!(props)
        )
    );
}
impl Default for TCOD_parser_int_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn TCOD_parse_bool_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_char_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_integer_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_float_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_string_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_color_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_dice_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_value_list_value(
        def: *mut TCOD_struct_int_t,
        listnum: ::std::os::raw::c_int,
    ) -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_property_value(
        parser: *mut TCOD_parser_int_t,
        def: TCOD_parser_struct_t,
        propname: *mut ::std::os::raw::c_char,
        list: bool,
    ) -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_sys_startup();
}
extern "C" {
    pub fn TCOD_sys_shutdown();
}
extern "C" {
    pub fn TCOD_sys_elapsed_milli() -> u32;
}
extern "C" {
    pub fn TCOD_sys_elapsed_seconds() -> f32;
}
extern "C" {
    pub fn TCOD_sys_sleep_milli(val: u32);
}
extern "C" {
    pub fn TCOD_sys_set_fps(val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_sys_get_fps() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_sys_get_last_frame_length() -> f32;
}
extern "C" {
    pub fn TCOD_sys_save_screenshot(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_sys_force_fullscreen_resolution(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_sys_set_renderer(renderer: TCOD_renderer_t);
}
extern "C" {
    pub fn TCOD_sys_get_renderer() -> TCOD_renderer_t;
}
extern "C" {
    pub fn TCOD_sys_get_current_resolution(
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_sys_get_fullscreen_offsets(
        offx: *mut ::std::os::raw::c_int,
        offy: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_sys_get_char_size(w: *mut ::std::os::raw::c_int, h: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_sys_update_char(
        asciiCode: ::std::os::raw::c_int,
        fontx: ::std::os::raw::c_int,
        fonty: ::std::os::raw::c_int,
        img: TCOD_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_sys_get_SDL_window() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_sys_get_SDL_renderer() -> *mut ::std::os::raw::c_void;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_event_t {
    TCOD_EVENT_NONE = 0,
    TCOD_EVENT_KEY_PRESS = 1,
    TCOD_EVENT_KEY_RELEASE = 2,
    TCOD_EVENT_KEY = 3,
    TCOD_EVENT_MOUSE_MOVE = 4,
    TCOD_EVENT_MOUSE_PRESS = 8,
    TCOD_EVENT_MOUSE_RELEASE = 16,
    TCOD_EVENT_MOUSE = 28,
    TCOD_EVENT_FINGER_MOVE = 32,
    TCOD_EVENT_FINGER_PRESS = 64,
    TCOD_EVENT_FINGER_RELEASE = 128,
    TCOD_EVENT_FINGER = 224,
    TCOD_EVENT_ANY = 255,
}
extern "C" {
    pub fn TCOD_sys_wait_for_event(
        eventMask: ::std::os::raw::c_int,
        key: *mut TCOD_key_t,
        mouse: *mut TCOD_mouse_t,
        flush: bool,
    ) -> TCOD_event_t;
}
extern "C" {
    pub fn TCOD_sys_check_for_event(
        eventMask: ::std::os::raw::c_int,
        key: *mut TCOD_key_t,
        mouse: *mut TCOD_mouse_t,
    ) -> TCOD_event_t;
}
extern "C" {
    pub fn TCOD_sys_create_directory(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_delete_file(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_delete_directory(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_is_directory(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_get_directory_content(
        path: *const ::std::os::raw::c_char,
        pattern: *const ::std::os::raw::c_char,
    ) -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_sys_file_exists(filename: *const ::std::os::raw::c_char, ...) -> bool;
}
extern "C" {
    pub fn TCOD_sys_read_file(
        filename: *const ::std::os::raw::c_char,
        buf: *mut *mut ::std::os::raw::c_uchar,
        size: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_sys_write_file(
        filename: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_uchar,
        size: u32,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_sys_clipboard_set(value: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_clipboard_get() -> *mut ::std::os::raw::c_char;
}
pub type TCOD_thread_t = *mut ::std::os::raw::c_void;
pub type TCOD_semaphore_t = *mut ::std::os::raw::c_void;
pub type TCOD_mutex_t = *mut ::std::os::raw::c_void;
pub type TCOD_cond_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_thread_new(
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> TCOD_thread_t;
}
extern "C" {
    pub fn TCOD_thread_delete(th: TCOD_thread_t);
}
extern "C" {
    pub fn TCOD_sys_get_num_cores() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_thread_wait(th: TCOD_thread_t);
}
extern "C" {
    pub fn TCOD_mutex_new() -> TCOD_mutex_t;
}
extern "C" {
    pub fn TCOD_mutex_in(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_mutex_out(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_mutex_delete(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_semaphore_new(initVal: ::std::os::raw::c_int) -> TCOD_semaphore_t;
}
extern "C" {
    pub fn TCOD_semaphore_lock(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_semaphore_unlock(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_semaphore_delete(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_condition_new() -> TCOD_cond_t;
}
extern "C" {
    pub fn TCOD_condition_signal(sem: TCOD_cond_t);
}
extern "C" {
    pub fn TCOD_condition_broadcast(sem: TCOD_cond_t);
}
extern "C" {
    pub fn TCOD_condition_wait(sem: TCOD_cond_t, mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_condition_delete(sem: TCOD_cond_t);
}
pub type TCOD_library_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_load_library(path: *const ::std::os::raw::c_char) -> TCOD_library_t;
}
extern "C" {
    pub fn TCOD_get_function_address(
        library: TCOD_library_t,
        function_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_close_library(arg1: TCOD_library_t);
}
pub type SDL_renderer_t =
    ::std::option::Option<unsafe extern "C" fn(sdl_renderer: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn TCOD_sys_register_SDL_renderer(renderer: SDL_renderer_t);
}
pub type TCOD_text_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_text_init(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        max_chars: ::std::os::raw::c_int,
    ) -> TCOD_text_t;
}
extern "C" {
    pub fn TCOD_text_init2(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        max_chars: ::std::os::raw::c_int,
    ) -> TCOD_text_t;
}
extern "C" {
    pub fn TCOD_text_set_pos(txt: TCOD_text_t, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_text_set_properties(
        txt: TCOD_text_t,
        cursor_char: ::std::os::raw::c_int,
        blink_interval: ::std::os::raw::c_int,
        prompt: *const ::std::os::raw::c_char,
        tab_size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_text_set_colors(
        txt: TCOD_text_t,
        fore: TCOD_color_t,
        back: TCOD_color_t,
        back_transparency: f32,
    );
}
extern "C" {
    pub fn TCOD_text_update(txt: TCOD_text_t, key: TCOD_key_t) -> bool;
}
extern "C" {
    pub fn TCOD_text_render(txt: TCOD_text_t, con: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_text_get(txt: TCOD_text_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_text_reset(txt: TCOD_text_t);
}
extern "C" {
    pub fn TCOD_text_delete(txt: TCOD_text_t);
}
pub type TCOD_zip_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_zip_new() -> TCOD_zip_t;
}
extern "C" {
    pub fn TCOD_zip_delete(zip: TCOD_zip_t);
}
extern "C" {
    pub fn TCOD_zip_put_char(zip: TCOD_zip_t, val: ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_zip_put_int(zip: TCOD_zip_t, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_zip_put_float(zip: TCOD_zip_t, val: f32);
}
extern "C" {
    pub fn TCOD_zip_put_string(zip: TCOD_zip_t, val: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_zip_put_color(zip: TCOD_zip_t, val: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_zip_put_image(zip: TCOD_zip_t, val: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_zip_put_console(zip: TCOD_zip_t, val: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_zip_put_data(
        zip: TCOD_zip_t,
        nbBytes: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn TCOD_zip_get_current_bytes(zip: TCOD_zip_t) -> u32;
}
extern "C" {
    pub fn TCOD_zip_save_to_file(
        zip: TCOD_zip_t,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_load_from_file(
        zip: TCOD_zip_t,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_char(zip: TCOD_zip_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_zip_get_int(zip: TCOD_zip_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_float(zip: TCOD_zip_t) -> f32;
}
extern "C" {
    pub fn TCOD_zip_get_string(zip: TCOD_zip_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_zip_get_color(zip: TCOD_zip_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_zip_get_image(zip: TCOD_zip_t) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_zip_get_console(zip: TCOD_zip_t) -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_zip_get_data(
        zip: TCOD_zip_t,
        nbBytes: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_remaining_bytes(zip: TCOD_zip_t) -> u32;
}
extern "C" {
    pub fn TCOD_zip_skip_bytes(zip: TCOD_zip_t, nbBytes: u32);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
